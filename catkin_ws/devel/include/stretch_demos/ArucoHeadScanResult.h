// Generated by gencpp from file stretch_demos/ArucoHeadScanResult.msg
// DO NOT EDIT!


#ifndef STRETCH_DEMOS_MESSAGE_ARUCOHEADSCANRESULT_H
#define STRETCH_DEMOS_MESSAGE_ARUCOHEADSCANRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stretch_demos
{
template <class ContainerAllocator>
struct ArucoHeadScanResult_
{
  typedef ArucoHeadScanResult_<ContainerAllocator> Type;

  ArucoHeadScanResult_()
    : aruco_found(false)  {
    }
  ArucoHeadScanResult_(const ContainerAllocator& _alloc)
    : aruco_found(false)  {
  (void)_alloc;
    }



   typedef uint8_t _aruco_found_type;
  _aruco_found_type aruco_found;





  typedef boost::shared_ptr< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> const> ConstPtr;

}; // struct ArucoHeadScanResult_

typedef ::stretch_demos::ArucoHeadScanResult_<std::allocator<void> > ArucoHeadScanResult;

typedef boost::shared_ptr< ::stretch_demos::ArucoHeadScanResult > ArucoHeadScanResultPtr;
typedef boost::shared_ptr< ::stretch_demos::ArucoHeadScanResult const> ArucoHeadScanResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator1> & lhs, const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator2> & rhs)
{
  return lhs.aruco_found == rhs.aruco_found;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator1> & lhs, const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stretch_demos

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc8d979150e87116bdefde500a6f1d59";
  }

  static const char* value(const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc8d979150e87116ULL;
  static const uint64_t static_value2 = 0xbdefde500a6f1d59ULL;
};

template<class ContainerAllocator>
struct DataType< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stretch_demos/ArucoHeadScanResult";
  }

  static const char* value(const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"\n"
"# Whether goal aruco ID was found\n"
"bool aruco_found\n"
"\n"
;
  }

  static const char* value(const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aruco_found);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArucoHeadScanResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stretch_demos::ArucoHeadScanResult_<ContainerAllocator>& v)
  {
    s << indent << "aruco_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aruco_found);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRETCH_DEMOS_MESSAGE_ARUCOHEADSCANRESULT_H
