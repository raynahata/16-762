// Generated by gencpp from file manipulation/AlignBaseRequest.msg
// DO NOT EDIT!


#ifndef MANIPULATION_MESSAGE_ALIGNBASEREQUEST_H
#define MANIPULATION_MESSAGE_ALIGNBASEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulation
{
template <class ContainerAllocator>
struct AlignBaseRequest_
{
  typedef AlignBaseRequest_<ContainerAllocator> Type;

  AlignBaseRequest_()
    : location()  {
    }
  AlignBaseRequest_(const ContainerAllocator& _alloc)
    : location(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::manipulation::AlignBaseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulation::AlignBaseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AlignBaseRequest_

typedef ::manipulation::AlignBaseRequest_<std::allocator<void> > AlignBaseRequest;

typedef boost::shared_ptr< ::manipulation::AlignBaseRequest > AlignBaseRequestPtr;
typedef boost::shared_ptr< ::manipulation::AlignBaseRequest const> AlignBaseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulation::AlignBaseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulation::AlignBaseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manipulation::AlignBaseRequest_<ContainerAllocator1> & lhs, const ::manipulation::AlignBaseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manipulation::AlignBaseRequest_<ContainerAllocator1> & lhs, const ::manipulation::AlignBaseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manipulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulation::AlignBaseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulation::AlignBaseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation::AlignBaseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03da474bc61cfeb81a8854b4ca05bafa";
  }

  static const char* value(const ::manipulation::AlignBaseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03da474bc61cfeb8ULL;
  static const uint64_t static_value2 = 0x1a8854b4ca05bafaULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulation/AlignBaseRequest";
  }

  static const char* value(const ::manipulation::AlignBaseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# AlignBase.srv\n"
"string location\n"
;
  }

  static const char* value(const ::manipulation::AlignBaseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlignBaseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulation::AlignBaseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulation::AlignBaseRequest_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATION_MESSAGE_ALIGNBASEREQUEST_H
