;; Auto-generated. Do not edit!


(when (boundp 'stretch_demos::ArucoHeadScanFeedback)
  (if (not (find-package "STRETCH_DEMOS"))
    (make-package "STRETCH_DEMOS"))
  (shadow 'ArucoHeadScanFeedback (find-package "STRETCH_DEMOS")))
(unless (find-package "STRETCH_DEMOS::ARUCOHEADSCANFEEDBACK")
  (make-package "STRETCH_DEMOS::ARUCOHEADSCANFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude ArucoHeadScanFeedback.msg.html


(defclass stretch_demos::ArucoHeadScanFeedback
  :super ros::object
  :slots (_pan_angle ))

(defmethod stretch_demos::ArucoHeadScanFeedback
  (:init
   (&key
    ((:pan_angle __pan_angle) 0.0)
    )
   (send-super :init)
   (setq _pan_angle (float __pan_angle))
   self)
  (:pan_angle
   (&optional __pan_angle)
   (if __pan_angle (setq _pan_angle __pan_angle)) _pan_angle)
  (:serialization-length
   ()
   (+
    ;; float32 _pan_angle
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _pan_angle
       (sys::poke _pan_angle (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _pan_angle
     (setq _pan_angle (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get stretch_demos::ArucoHeadScanFeedback :md5sum-) "f8d06c64a9db7a2a34a365c076b315f6")
(setf (get stretch_demos::ArucoHeadScanFeedback :datatype-) "stretch_demos/ArucoHeadScanFeedback")
(setf (get stretch_demos::ArucoHeadScanFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message

# Pan angle of the camera
float32 pan_angle


")



(provide :stretch_demos/ArucoHeadScanFeedback "f8d06c64a9db7a2a34a365c076b315f6")


