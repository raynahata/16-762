;; Auto-generated. Do not edit!


(when (boundp 'stretch_demos::ArucoHeadScanGoal)
  (if (not (find-package "STRETCH_DEMOS"))
    (make-package "STRETCH_DEMOS"))
  (shadow 'ArucoHeadScanGoal (find-package "STRETCH_DEMOS")))
(unless (find-package "STRETCH_DEMOS::ARUCOHEADSCANGOAL")
  (make-package "STRETCH_DEMOS::ARUCOHEADSCANGOAL"))

(in-package "ROS")
;;//! \htmlinclude ArucoHeadScanGoal.msg.html


(defclass stretch_demos::ArucoHeadScanGoal
  :super ros::object
  :slots (_aruco_id _tilt_angle _publish_to_map _fill_in_blindspot_with_second_scan _fast_scan ))

(defmethod stretch_demos::ArucoHeadScanGoal
  (:init
   (&key
    ((:aruco_id __aruco_id) 0)
    ((:tilt_angle __tilt_angle) 0.0)
    ((:publish_to_map __publish_to_map) nil)
    ((:fill_in_blindspot_with_second_scan __fill_in_blindspot_with_second_scan) nil)
    ((:fast_scan __fast_scan) nil)
    )
   (send-super :init)
   (setq _aruco_id (round __aruco_id))
   (setq _tilt_angle (float __tilt_angle))
   (setq _publish_to_map __publish_to_map)
   (setq _fill_in_blindspot_with_second_scan __fill_in_blindspot_with_second_scan)
   (setq _fast_scan __fast_scan)
   self)
  (:aruco_id
   (&optional __aruco_id)
   (if __aruco_id (setq _aruco_id __aruco_id)) _aruco_id)
  (:tilt_angle
   (&optional __tilt_angle)
   (if __tilt_angle (setq _tilt_angle __tilt_angle)) _tilt_angle)
  (:publish_to_map
   (&optional (__publish_to_map :null))
   (if (not (eq __publish_to_map :null)) (setq _publish_to_map __publish_to_map)) _publish_to_map)
  (:fill_in_blindspot_with_second_scan
   (&optional (__fill_in_blindspot_with_second_scan :null))
   (if (not (eq __fill_in_blindspot_with_second_scan :null)) (setq _fill_in_blindspot_with_second_scan __fill_in_blindspot_with_second_scan)) _fill_in_blindspot_with_second_scan)
  (:fast_scan
   (&optional (__fast_scan :null))
   (if (not (eq __fast_scan :null)) (setq _fast_scan __fast_scan)) _fast_scan)
  (:serialization-length
   ()
   (+
    ;; uint32 _aruco_id
    4
    ;; float32 _tilt_angle
    4
    ;; bool _publish_to_map
    1
    ;; bool _fill_in_blindspot_with_second_scan
    1
    ;; bool _fast_scan
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint32 _aruco_id
       (write-long _aruco_id s)
     ;; float32 _tilt_angle
       (sys::poke _tilt_angle (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _publish_to_map
       (if _publish_to_map (write-byte -1 s) (write-byte 0 s))
     ;; bool _fill_in_blindspot_with_second_scan
       (if _fill_in_blindspot_with_second_scan (write-byte -1 s) (write-byte 0 s))
     ;; bool _fast_scan
       (if _fast_scan (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint32 _aruco_id
     (setq _aruco_id (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float32 _tilt_angle
     (setq _tilt_angle (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _publish_to_map
     (setq _publish_to_map (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _fill_in_blindspot_with_second_scan
     (setq _fill_in_blindspot_with_second_scan (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _fast_scan
     (setq _fast_scan (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get stretch_demos::ArucoHeadScanGoal :md5sum-) "7c9f72de60496d5ea3903a808d86da58")
(setf (get stretch_demos::ArucoHeadScanGoal :datatype-) "stretch_demos/ArucoHeadScanGoal")
(setf (get stretch_demos::ArucoHeadScanGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal

# Specify aruco ID to look for
uint32 aruco_id

# Specify the camera tilt_angle at which to scan
float32 tilt_angle

# Publish tf relative to the map frame
bool publish_to_map

# If robot should rotate to cover the blind spot generated by the mast
bool fill_in_blindspot_with_second_scan 

# If scan should stop as soon as a matching aruco ID is found
bool fast_scan


")



(provide :stretch_demos/ArucoHeadScanGoal "7c9f72de60496d5ea3903a808d86da58")


