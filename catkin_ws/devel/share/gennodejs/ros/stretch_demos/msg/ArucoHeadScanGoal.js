// Auto-generated. Do not edit!

// (in-package stretch_demos.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class ArucoHeadScanGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.aruco_id = null;
      this.tilt_angle = null;
      this.publish_to_map = null;
      this.fill_in_blindspot_with_second_scan = null;
      this.fast_scan = null;
    }
    else {
      if (initObj.hasOwnProperty('aruco_id')) {
        this.aruco_id = initObj.aruco_id
      }
      else {
        this.aruco_id = 0;
      }
      if (initObj.hasOwnProperty('tilt_angle')) {
        this.tilt_angle = initObj.tilt_angle
      }
      else {
        this.tilt_angle = 0.0;
      }
      if (initObj.hasOwnProperty('publish_to_map')) {
        this.publish_to_map = initObj.publish_to_map
      }
      else {
        this.publish_to_map = false;
      }
      if (initObj.hasOwnProperty('fill_in_blindspot_with_second_scan')) {
        this.fill_in_blindspot_with_second_scan = initObj.fill_in_blindspot_with_second_scan
      }
      else {
        this.fill_in_blindspot_with_second_scan = false;
      }
      if (initObj.hasOwnProperty('fast_scan')) {
        this.fast_scan = initObj.fast_scan
      }
      else {
        this.fast_scan = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ArucoHeadScanGoal
    // Serialize message field [aruco_id]
    bufferOffset = _serializer.uint32(obj.aruco_id, buffer, bufferOffset);
    // Serialize message field [tilt_angle]
    bufferOffset = _serializer.float32(obj.tilt_angle, buffer, bufferOffset);
    // Serialize message field [publish_to_map]
    bufferOffset = _serializer.bool(obj.publish_to_map, buffer, bufferOffset);
    // Serialize message field [fill_in_blindspot_with_second_scan]
    bufferOffset = _serializer.bool(obj.fill_in_blindspot_with_second_scan, buffer, bufferOffset);
    // Serialize message field [fast_scan]
    bufferOffset = _serializer.bool(obj.fast_scan, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ArucoHeadScanGoal
    let len;
    let data = new ArucoHeadScanGoal(null);
    // Deserialize message field [aruco_id]
    data.aruco_id = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [tilt_angle]
    data.tilt_angle = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [publish_to_map]
    data.publish_to_map = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [fill_in_blindspot_with_second_scan]
    data.fill_in_blindspot_with_second_scan = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [fast_scan]
    data.fast_scan = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 11;
  }

  static datatype() {
    // Returns string type for a message object
    return 'stretch_demos/ArucoHeadScanGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '7c9f72de60496d5ea3903a808d86da58';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    
    # Specify aruco ID to look for
    uint32 aruco_id
    
    # Specify the camera tilt_angle at which to scan
    float32 tilt_angle
    
    # Publish tf relative to the map frame
    bool publish_to_map
    
    # If robot should rotate to cover the blind spot generated by the mast
    bool fill_in_blindspot_with_second_scan 
    
    # If scan should stop as soon as a matching aruco ID is found
    bool fast_scan
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ArucoHeadScanGoal(null);
    if (msg.aruco_id !== undefined) {
      resolved.aruco_id = msg.aruco_id;
    }
    else {
      resolved.aruco_id = 0
    }

    if (msg.tilt_angle !== undefined) {
      resolved.tilt_angle = msg.tilt_angle;
    }
    else {
      resolved.tilt_angle = 0.0
    }

    if (msg.publish_to_map !== undefined) {
      resolved.publish_to_map = msg.publish_to_map;
    }
    else {
      resolved.publish_to_map = false
    }

    if (msg.fill_in_blindspot_with_second_scan !== undefined) {
      resolved.fill_in_blindspot_with_second_scan = msg.fill_in_blindspot_with_second_scan;
    }
    else {
      resolved.fill_in_blindspot_with_second_scan = false
    }

    if (msg.fast_scan !== undefined) {
      resolved.fast_scan = msg.fast_scan;
    }
    else {
      resolved.fast_scan = false
    }

    return resolved;
    }
};

module.exports = ArucoHeadScanGoal;
